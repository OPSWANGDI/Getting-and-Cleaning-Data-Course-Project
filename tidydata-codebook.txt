



```r
knitr::asis_output(survey_overview)
```


## Items


```r
knitr::asis_output(paste0(scales_items, sep = "\n\n\n", collapse = "\n\n\n"))
```




### subject {#subject .tabset}



#### Distribution {#subject_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/subject_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#subject_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name      data_type   missing   complete   n     mean   sd     p0   p25   p50    p75   p100   hist     
--------  ----------  --------  ---------  ----  -----  -----  ---  ----  -----  ----  -----  ---------
subject   integer     0         180        180   15.5   8.68   1    8     15.5   23    30     ▇▇▆▇▇▆▇▇ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### activity {#activity .tabset}



#### Distribution {#activity_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/activity_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#activity_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name       data_type   missing   complete   n     empty   n_unique   min   max 
---------  ----------  --------  ---------  ----  ------  ---------  ----  ----
activity   character   0         180        180   0       6          6     18  

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometer-mean()-X {#timeBodyAccelerometer_mean___X .tabset}



#### Distribution {#timeBodyAccelerometer_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometer_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometer_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean   sd      p0     p25    p50    p75    p100   hist     
-------------------------------  ----------  --------  ---------  ----  -----  ------  -----  -----  -----  -----  -----  ---------
timeBodyAccelerometer-mean()-X   numeric     0         180        180   0.27   0.012   0.22   0.27   0.28   0.28   0.3    ▁▁▁▁▂▇▂▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometer-mean()-Y {#timeBodyAccelerometer_mean___Y .tabset}



#### Distribution {#timeBodyAccelerometer_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometer_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometer_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean     sd       p0       p25     p50      p75      p100      hist     
-------------------------------  ----------  --------  ---------  ----  -------  -------  -------  ------  -------  -------  --------  ---------
timeBodyAccelerometer-mean()-Y   numeric     0         180        180   -0.018   0.0058   -0.041   -0.02   -0.017   -0.015   -0.0013   ▁▁▂▂▇▃▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometer-mean()-Z {#timeBodyAccelerometer_mean___Z .tabset}



#### Distribution {#timeBodyAccelerometer_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometer_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometer_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean    sd       p0      p25     p50     p75    p100     hist     
-------------------------------  ----------  --------  ---------  ----  ------  -------  ------  ------  ------  -----  -------  ---------
timeBodyAccelerometer-mean()-Z   numeric     0         180        180   -0.11   0.0096   -0.15   -0.11   -0.11   -0.1   -0.075   ▁▁▁▂▇▃▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometer-std()-X {#timeBodyAccelerometer_std___X .tabset}



#### Distribution {#timeBodyAccelerometer_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometer_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometer_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                            data_type   missing   complete   n     mean    sd     p0   p25     p50     p75    p100   hist     
------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  -----  -----  ---------
timeBodyAccelerometer-std()-X   numeric     0         180        180   -0.56   0.45   -1   -0.98   -0.75   -0.2   0.63   ▇▁▁▃▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometer-std()-Y {#timeBodyAccelerometer_std___Y .tabset}



#### Distribution {#timeBodyAccelerometer_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometer_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometer_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                            data_type   missing   complete   n     mean    sd    p0      p25     p50     p75      p100   hist     
------------------------------  ----------  --------  ---------  ----  ------  ----  ------  ------  ------  -------  -----  ---------
timeBodyAccelerometer-std()-Y   numeric     0         180        180   -0.46   0.5   -0.99   -0.94   -0.51   -0.031   0.62   ▇▁▁▁▃▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometer-std()-Z {#timeBodyAccelerometer_std___Z .tabset}



#### Distribution {#timeBodyAccelerometer_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometer_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometer_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                            data_type   missing   complete   n     mean    sd    p0      p25     p50     p75     p100   hist     
------------------------------  ----------  --------  ---------  ----  ------  ----  ------  ------  ------  ------  -----  ---------
timeBodyAccelerometer-std()-Z   numeric     0         180        180   -0.58   0.4   -0.99   -0.95   -0.65   -0.23   0.61   ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometer-mean()-X {#timeGravityAccelerometer_mean___X .tabset}



#### Distribution {#timeGravityAccelerometer_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometer_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometer_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean   sd     p0      p25    p50    p75    p100   hist     
----------------------------------  ----------  --------  ---------  ----  -----  -----  ------  -----  -----  -----  -----  ---------
timeGravityAccelerometer-mean()-X   numeric     0         180        180   0.7    0.49   -0.68   0.84   0.92   0.94   0.97   ▁▁▁▁▁▁▁▇ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometer-mean()-Y {#timeGravityAccelerometer_mean___Y .tabset}



#### Distribution {#timeGravityAccelerometer_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometer_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometer_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean     sd     p0      p25     p50     p75     p100   hist     
----------------------------------  ----------  --------  ---------  ----  -------  -----  ------  ------  ------  ------  -----  ---------
timeGravityAccelerometer-mean()-Y   numeric     0         180        180   -0.016   0.35   -0.48   -0.23   -0.13   0.088   0.96   ▂▇▅▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometer-mean()-Z {#timeGravityAccelerometer_mean___Z .tabset}



#### Distribution {#timeGravityAccelerometer_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometer_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometer_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean    sd     p0     p25     p50     p75    p100   hist     
----------------------------------  ----------  --------  ---------  ----  ------  -----  -----  ------  ------  -----  -----  ---------
timeGravityAccelerometer-mean()-Z   numeric     0         180        180   0.074   0.29   -0.5   -0.12   0.024   0.15   0.96   ▁▅▇▆▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometer-std()-X {#timeGravityAccelerometer_std___X .tabset}



#### Distribution {#timeGravityAccelerometer_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometer_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometer_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                               data_type   missing   complete   n     mean    sd      p0   p25     p50     p75     p100    hist     
---------------------------------  ----------  --------  ---------  ----  ------  ------  ---  ------  ------  ------  ------  ---------
timeGravityAccelerometer-std()-X   numeric     0         180        180   -0.96   0.025   -1   -0.98   -0.97   -0.95   -0.83   ▇▆▅▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometer-std()-Y {#timeGravityAccelerometer_std___Y .tabset}



#### Distribution {#timeGravityAccelerometer_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometer_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometer_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                               data_type   missing   complete   n     mean    sd      p0      p25     p50     p75     p100    hist     
---------------------------------  ----------  --------  ---------  ----  ------  ------  ------  ------  ------  ------  ------  ---------
timeGravityAccelerometer-std()-Y   numeric     0         180        180   -0.95   0.033   -0.99   -0.97   -0.96   -0.94   -0.64   ▇▅▁▁▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometer-std()-Z {#timeGravityAccelerometer_std___Z .tabset}



#### Distribution {#timeGravityAccelerometer_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometer_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometer_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                               data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100    hist     
---------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  ------  ---------
timeGravityAccelerometer-std()-Z   numeric     0         180        180   -0.94   0.04   -0.99   -0.96   -0.95   -0.92   -0.61   ▇▆▂▁▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerk-mean()-X {#timeBodyAccelerometerJerk_mean___X .tabset}



#### Distribution {#timeBodyAccelerometerJerk_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerk_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerk_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                 data_type   missing   complete   n     mean    sd      p0      p25     p50     p75     p100   hist     
-----------------------------------  ----------  --------  ---------  ----  ------  ------  ------  ------  ------  ------  -----  ---------
timeBodyAccelerometerJerk-mean()-X   numeric     0         180        180   0.079   0.013   0.043   0.074   0.076   0.083   0.13   ▁▁▇▇▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerk-mean()-Y {#timeBodyAccelerometerJerk_mean___Y .tabset}



#### Distribution {#timeBodyAccelerometerJerk_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerk_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerk_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                 data_type   missing   complete   n     mean     sd      p0       p25       p50      p75     p100    hist     
-----------------------------------  ----------  --------  ---------  ----  -------  ------  -------  --------  -------  ------  ------  ---------
timeBodyAccelerometerJerk-mean()-Y   numeric     0         180        180   0.0076   0.014   -0.039   0.00047   0.0095   0.013   0.057   ▁▁▂▆▇▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerk-mean()-Z {#timeBodyAccelerometerJerk_mean___Z .tabset}



#### Distribution {#timeBodyAccelerometerJerk_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerk_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerk_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                 data_type   missing   complete   n     mean     sd      p0       p25      p50       p75     p100    hist     
-----------------------------------  ----------  --------  ---------  ----  -------  ------  -------  -------  --------  ------  ------  ---------
timeBodyAccelerometerJerk-mean()-Z   numeric     0         180        180   -0.005   0.013   -0.067   -0.011   -0.0039   0.002   0.038   ▁▁▁▁▇▆▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerk-std()-X {#timeBodyAccelerometerJerk_std___X .tabset}



#### Distribution {#timeBodyAccelerometerJerk_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerk_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerk_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
----------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
timeBodyAccelerometerJerk-std()-X   numeric     0         180        180   -0.59   0.42   -0.99   -0.98   -0.81   -0.22   0.54   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerk-std()-Y {#timeBodyAccelerometerJerk_std___Y .tabset}



#### Distribution {#timeBodyAccelerometerJerk_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerk_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerk_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
----------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
timeBodyAccelerometerJerk-std()-Y   numeric     0         180        180   -0.57   0.43   -0.99   -0.97   -0.78   -0.15   0.36   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerk-std()-Z {#timeBodyAccelerometerJerk_std___Z .tabset}



#### Distribution {#timeBodyAccelerometerJerk_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerk_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerk_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100    hist     
----------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  ------  ---------
timeBodyAccelerometerJerk-std()-Z   numeric     0         180        180   -0.74   0.28   -0.99   -0.98   -0.88   -0.51   0.031   ▇▁▂▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscope-mean()-X {#timeBodyGyroscope_mean___X .tabset}



#### Distribution {#timeBodyGyroscope_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscope_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscope_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                         data_type   missing   complete   n     mean     sd      p0      p25      p50      p75      p100   hist     
---------------------------  ----------  --------  ---------  ----  -------  ------  ------  -------  -------  -------  -----  ---------
timeBodyGyroscope-mean()-X   numeric     0         180        180   -0.032   0.054   -0.21   -0.047   -0.029   -0.017   0.19   ▁▁▂▇▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscope-mean()-Y {#timeBodyGyroscope_mean___Y .tabset}



#### Distribution {#timeBodyGyroscope_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscope_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscope_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                         data_type   missing   complete   n     mean     sd      p0     p25     p50      p75      p100    hist     
---------------------------  ----------  --------  ---------  ----  -------  ------  -----  ------  -------  -------  ------  ---------
timeBodyGyroscope-mean()-Y   numeric     0         180        180   -0.074   0.036   -0.2   -0.09   -0.073   -0.061   0.027   ▁▁▁▃▇▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscope-mean()-Z {#timeBodyGyroscope_mean___Z .tabset}



#### Distribution {#timeBodyGyroscope_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscope_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscope_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                         data_type   missing   complete   n     mean    sd      p0       p25     p50     p75   p100   hist     
---------------------------  ----------  --------  ---------  ----  ------  ------  -------  ------  ------  ----  -----  ---------
timeBodyGyroscope-mean()-Z   numeric     0         180        180   0.087   0.036   -0.072   0.075   0.085   0.1   0.18   ▁▁▁▁▇▇▂▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscope-std()-X {#timeBodyGyroscope_std___X .tabset}



#### Distribution {#timeBodyGyroscope_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscope_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscope_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                        data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
--------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
timeBodyGyroscope-std()-X   numeric     0         180        180   -0.69   0.29   -0.99   -0.97   -0.79   -0.44   0.27   ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscope-std()-Y {#timeBodyGyroscope_std___Y .tabset}



#### Distribution {#timeBodyGyroscope_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscope_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscope_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                        data_type   missing   complete   n     mean    sd     p0      p25     p50    p75     p100   hist     
--------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  -----  ------  -----  ---------
timeBodyGyroscope-std()-Y   numeric     0         180        180   -0.65   0.35   -0.99   -0.96   -0.8   -0.42   0.48   ▇▁▃▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscope-std()-Z {#timeBodyGyroscope_std___Z .tabset}



#### Distribution {#timeBodyGyroscope_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscope_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscope_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                        data_type   missing   complete   n     mean    sd     p0      p25     p50    p75     p100   hist     
--------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  -----  ------  -----  ---------
timeBodyGyroscope-std()-Z   numeric     0         180        180   -0.62   0.37   -0.99   -0.96   -0.8   -0.31   0.56   ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerk-mean()-X {#timeBodyGyroscopeJerk_mean___X .tabset}



#### Distribution {#timeBodyGyroscopeJerk_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerk_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerk_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean     sd      p0      p25    p50      p75      p100     hist     
-------------------------------  ----------  --------  ---------  ----  -------  ------  ------  -----  -------  -------  -------  ---------
timeBodyGyroscopeJerk-mean()-X   numeric     0         180        180   -0.096   0.023   -0.16   -0.1   -0.099   -0.091   -0.022   ▁▁▁▇▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerk-mean()-Y {#timeBodyGyroscopeJerk_mean___Y .tabset}



#### Distribution {#timeBodyGyroscopeJerk_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerk_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerk_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean     sd       p0       p25      p50      p75      p100     hist     
-------------------------------  ----------  --------  ---------  ----  -------  -------  -------  -------  -------  -------  -------  ---------
timeBodyGyroscopeJerk-mean()-Y   numeric     0         180        180   -0.043   0.0095   -0.077   -0.046   -0.041   -0.038   -0.013   ▁▁▁▂▇▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerk-mean()-Z {#timeBodyGyroscopeJerk_mean___Z .tabset}



#### Distribution {#timeBodyGyroscopeJerk_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerk_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerk_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean     sd      p0       p25      p50      p75      p100      hist     
-------------------------------  ----------  --------  ---------  ----  -------  ------  -------  -------  -------  -------  --------  ---------
timeBodyGyroscopeJerk-mean()-Z   numeric     0         180        180   -0.055   0.012   -0.092   -0.062   -0.053   -0.049   -0.0069   ▁▁▃▇▃▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerk-std()-X {#timeBodyGyroscopeJerk_std___X .tabset}



#### Distribution {#timeBodyGyroscopeJerk_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerk_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerk_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                            data_type   missing   complete   n     mean   sd    p0   p25     p50     p75     p100   hist     
------------------------------  ----------  --------  ---------  ----  -----  ----  ---  ------  ------  ------  -----  ---------
timeBodyGyroscopeJerk-std()-X   numeric     0         180        180   -0.7   0.3   -1   -0.98   -0.84   -0.46   0.18   ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerk-std()-Y {#timeBodyGyroscopeJerk_std___Y .tabset}



#### Distribution {#timeBodyGyroscopeJerk_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerk_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerk_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                            data_type   missing   complete   n     mean    sd     p0   p25     p50     p75     p100   hist     
------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  ------  -----  ---------
timeBodyGyroscopeJerk-std()-Y   numeric     0         180        180   -0.76   0.27   -1   -0.98   -0.89   -0.59   0.3    ▇▂▂▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerk-std()-Z {#timeBodyGyroscopeJerk_std___Z .tabset}



#### Distribution {#timeBodyGyroscopeJerk_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerk_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerk_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                            data_type   missing   complete   n     mean    sd    p0   p25     p50     p75     p100   hist     
------------------------------  ----------  --------  ---------  ----  ------  ----  ---  ------  ------  ------  -----  ---------
timeBodyGyroscopeJerk-std()-Z   numeric     0         180        180   -0.71   0.3   -1   -0.98   -0.86   -0.47   0.19   ▇▁▂▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerMagnitude-mean() {#timeBodyAccelerometerMagnitude_mean__ .tabset}



#### Distribution {#timeBodyAccelerometerMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                    data_type   missing   complete   n     mean   sd     p0      p25     p50     p75      p100   hist     
--------------------------------------  ----------  --------  ---------  ----  -----  -----  ------  ------  ------  -------  -----  ---------
timeBodyAccelerometerMagnitude-mean()   numeric     0         180        180   -0.5   0.47   -0.99   -0.96   -0.48   -0.092   0.64   ▇▁▁▂▃▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerMagnitude-std() {#timeBodyAccelerometerMagnitude_std__ .tabset}



#### Distribution {#timeBodyAccelerometerMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                   data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
-------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
timeBodyAccelerometerMagnitude-std()   numeric     0         180        180   -0.54   0.43   -0.99   -0.94   -0.61   -0.21   0.43   ▇▁▁▂▂▁▂▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometerMagnitude-mean() {#timeGravityAccelerometerMagnitude_mean__ .tabset}



#### Distribution {#timeGravityAccelerometerMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometerMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometerMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                       data_type   missing   complete   n     mean   sd     p0      p25     p50     p75      p100   hist     
-----------------------------------------  ----------  --------  ---------  ----  -----  -----  ------  ------  ------  -------  -----  ---------
timeGravityAccelerometerMagnitude-mean()   numeric     0         180        180   -0.5   0.47   -0.99   -0.96   -0.48   -0.092   0.64   ▇▁▁▂▃▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeGravityAccelerometerMagnitude-std() {#timeGravityAccelerometerMagnitude_std__ .tabset}



#### Distribution {#timeGravityAccelerometerMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeGravityAccelerometerMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeGravityAccelerometerMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                      data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
----------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
timeGravityAccelerometerMagnitude-std()   numeric     0         180        180   -0.54   0.43   -0.99   -0.94   -0.61   -0.21   0.43   ▇▁▁▂▂▁▂▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerkMagnitude-mean() {#timeBodyAccelerometerJerkMagnitude_mean__ .tabset}



#### Distribution {#timeBodyAccelerometerJerkMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerkMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerkMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                        data_type   missing   complete   n     mean    sd    p0      p25     p50     p75     p100   hist     
------------------------------------------  ----------  --------  ---------  ----  ------  ----  ------  ------  ------  ------  -----  ---------
timeBodyAccelerometerJerkMagnitude-mean()   numeric     0         180        180   -0.61   0.4   -0.99   -0.98   -0.82   -0.25   0.43   ▇▁▁▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyAccelerometerJerkMagnitude-std() {#timeBodyAccelerometerJerkMagnitude_std__ .tabset}



#### Distribution {#timeBodyAccelerometerJerkMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyAccelerometerJerkMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyAccelerometerJerkMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                       data_type   missing   complete   n     mean    sd     p0      p25     p50    p75     p100   hist     
-----------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  -----  ------  -----  ---------
timeBodyAccelerometerJerkMagnitude-std()   numeric     0         180        180   -0.58   0.42   -0.99   -0.98   -0.8   -0.22   0.45   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeMagnitude-mean() {#timeBodyGyroscopeMagnitude_mean__ .tabset}



#### Distribution {#timeBodyGyroscopeMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                data_type   missing   complete   n     mean    sd    p0      p25     p50     p75     p100   hist     
----------------------------------  ----------  --------  ---------  ----  ------  ----  ------  ------  ------  ------  -----  ---------
timeBodyGyroscopeMagnitude-mean()   numeric     0         180        180   -0.57   0.4   -0.98   -0.95   -0.66   -0.22   0.42   ▇▁▁▂▃▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeMagnitude-std() {#timeBodyGyroscopeMagnitude_std__ .tabset}



#### Distribution {#timeBodyGyroscopeMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                               data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
---------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
timeBodyGyroscopeMagnitude-std()   numeric     0         180        180   -0.63   0.34   -0.98   -0.95   -0.74   -0.36   0.3    ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerkMagnitude-mean() {#timeBodyGyroscopeJerkMagnitude_mean__ .tabset}



#### Distribution {#timeBodyGyroscopeJerkMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerkMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerkMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                    data_type   missing   complete   n     mean    sd     p0   p25     p50     p75     p100    hist     
--------------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  ------  ------  ---------
timeBodyGyroscopeJerkMagnitude-mean()   numeric     0         180        180   -0.74   0.28   -1   -0.99   -0.86   -0.51   0.088   ▇▁▂▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### timeBodyGyroscopeJerkMagnitude-std() {#timeBodyGyroscopeJerkMagnitude_std__ .tabset}



#### Distribution {#timeBodyGyroscopeJerkMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/timeBodyGyroscopeJerkMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#timeBodyGyroscopeJerkMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                   data_type   missing   complete   n     mean    sd     p0   p25     p50     p75     p100   hist     
-------------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  ------  -----  ---------
timeBodyGyroscopeJerkMagnitude-std()   numeric     0         180        180   -0.76   0.27   -1   -0.98   -0.88   -0.58   0.25   ▇▂▃▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometer-mean()-X {#frequencyBodyAccelerometer_mean___X .tabset}



#### Distribution {#frequencyBodyAccelerometer_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometer_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometer_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                  data_type   missing   complete   n     mean    sd     p0   p25     p50     p75     p100   hist     
------------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  ------  -----  ---------
frequencyBodyAccelerometer-mean()-X   numeric     0         180        180   -0.58   0.43   -1   -0.98   -0.77   -0.22   0.54   ▇▁▁▃▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometer-mean()-Y {#frequencyBodyAccelerometer_mean___Y .tabset}



#### Distribution {#frequencyBodyAccelerometer_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometer_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometer_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                  data_type   missing   complete   n     mean    sd     p0      p25     p50     p75      p100   hist     
------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  -------  -----  ---------
frequencyBodyAccelerometer-mean()-Y   numeric     0         180        180   -0.49   0.48   -0.99   -0.95   -0.59   -0.063   0.52   ▇▁▁▁▃▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometer-mean()-Z {#frequencyBodyAccelerometer_mean___Z .tabset}



#### Distribution {#frequencyBodyAccelerometer_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometer_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometer_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                  data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometer-mean()-Z   numeric     0         180        180   -0.63   0.36   -0.99   -0.96   -0.72   -0.32   0.28   ▇▁▁▂▃▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometer-std()-X {#frequencyBodyAccelerometer_std___X .tabset}



#### Distribution {#frequencyBodyAccelerometer_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometer_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometer_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                 data_type   missing   complete   n     mean    sd     p0   p25     p50     p75    p100   hist     
-----------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  -----  -----  ---------
frequencyBodyAccelerometer-std()-X   numeric     0         180        180   -0.55   0.46   -1   -0.98   -0.75   -0.2   0.66   ▇▁▁▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometer-std()-Y {#frequencyBodyAccelerometer_std___Y .tabset}



#### Distribution {#frequencyBodyAccelerometer_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometer_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometer_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                 data_type   missing   complete   n     mean    sd     p0      p25     p50     p75      p100   hist     
-----------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  -------  -----  ---------
frequencyBodyAccelerometer-std()-Y   numeric     0         180        180   -0.48   0.47   -0.99   -0.94   -0.51   -0.079   0.56   ▇▁▁▁▃▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometer-std()-Z {#frequencyBodyAccelerometer_std___Z .tabset}



#### Distribution {#frequencyBodyAccelerometer_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometer_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometer_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                 data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
-----------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometer-std()-Z   numeric     0         180        180   -0.58   0.39   -0.99   -0.95   -0.64   -0.27   0.69   ▇▁▂▃▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerk-mean()-X {#frequencyBodyAccelerometerJerk_mean___X .tabset}



#### Distribution {#frequencyBodyAccelerometerJerk_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerk_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerk_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                      data_type   missing   complete   n     mean    sd    p0      p25     p50     p75     p100   hist     
----------------------------------------  ----------  --------  ---------  ----  ------  ----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerJerk-mean()-X   numeric     0         180        180   -0.61   0.4   -0.99   -0.98   -0.81   -0.28   0.47   ▇▁▁▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerk-mean()-Y {#frequencyBodyAccelerometerJerk_mean___Y .tabset}



#### Distribution {#frequencyBodyAccelerometerJerk_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerk_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerk_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                      data_type   missing   complete   n     mean    sd     p0      p25     p50     p75    p100   hist     
----------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  -----  -----  ---------
frequencyBodyAccelerometerJerk-mean()-Y   numeric     0         180        180   -0.59   0.41   -0.99   -0.97   -0.78   -0.2   0.28   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerk-mean()-Z {#frequencyBodyAccelerometerJerk_mean___Z .tabset}



#### Distribution {#frequencyBodyAccelerometerJerk_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerk_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerk_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                      data_type   missing   complete   n     mean    sd    p0      p25     p50     p75     p100   hist     
----------------------------------------  ----------  --------  ---------  ----  ------  ----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerJerk-mean()-Z   numeric     0         180        180   -0.71   0.3   -0.99   -0.98   -0.87   -0.47   0.16   ▇▁▂▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerk-std()-X {#frequencyBodyAccelerometerJerk_std___X .tabset}



#### Distribution {#frequencyBodyAccelerometerJerk_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerk_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerk_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                     data_type   missing   complete   n     mean    sd    p0   p25     p50     p75     p100   hist     
---------------------------------------  ----------  --------  ---------  ----  ------  ----  ---  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerJerk-std()-X   numeric     0         180        180   -0.61   0.4   -1   -0.98   -0.83   -0.25   0.48   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerk-std()-Y {#frequencyBodyAccelerometerJerk_std___Y .tabset}



#### Distribution {#frequencyBodyAccelerometerJerk_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerk_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerk_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                     data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
---------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerJerk-std()-Y   numeric     0         180        180   -0.57   0.43   -0.99   -0.97   -0.79   -0.17   0.35   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerk-std()-Z {#frequencyBodyAccelerometerJerk_std___Z .tabset}



#### Distribution {#frequencyBodyAccelerometerJerk_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerk_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerk_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                     data_type   missing   complete   n     mean    sd     p0      p25     p50    p75     p100      hist     
---------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  -----  ------  --------  ---------
frequencyBodyAccelerometerJerk-std()-Z   numeric     0         180        180   -0.76   0.26   -0.99   -0.98   -0.9   -0.54   -0.0062   ▇▁▂▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscope-mean()-X {#frequencyBodyGyroscope_mean___X .tabset}



#### Distribution {#frequencyBodyGyroscope_mean___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscope_mean___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscope_mean___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                              data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
--------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscope-mean()-X   numeric     0         180        180   -0.64   0.35   -0.99   -0.97   -0.73   -0.34   0.47   ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscope-mean()-Y {#frequencyBodyGyroscope_mean___Y .tabset}



#### Distribution {#frequencyBodyGyroscope_mean___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscope_mean___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscope_mean___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                              data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
--------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscope-mean()-Y   numeric     0         180        180   -0.68   0.33   -0.99   -0.97   -0.81   -0.45   0.33   ▇▁▃▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscope-mean()-Z {#frequencyBodyGyroscope_mean___Z .tabset}



#### Distribution {#frequencyBodyGyroscope_mean___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscope_mean___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscope_mean___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                              data_type   missing   complete   n     mean   sd     p0      p25     p50     p75     p100   hist     
--------------------------------  ----------  --------  ---------  ----  -----  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscope-mean()-Z   numeric     0         180        180   -0.6   0.38   -0.99   -0.96   -0.79   -0.26   0.49   ▇▁▁▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscope-std()-X {#frequencyBodyGyroscope_std___X .tabset}



#### Distribution {#frequencyBodyGyroscope_std___X_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscope_std___X_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscope_std___X_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
-------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscope-std()-X   numeric     0         180        180   -0.71   0.27   -0.99   -0.98   -0.81   -0.48   0.2    ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscope-std()-Y {#frequencyBodyGyroscope_std___Y .tabset}



#### Distribution {#frequencyBodyGyroscope_std___Y_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscope_std___Y_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscope_std___Y_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean    sd     p0      p25     p50    p75     p100   hist     
-------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  -----  ------  -----  ---------
frequencyBodyGyroscope-std()-Y   numeric     0         180        180   -0.65   0.36   -0.99   -0.96   -0.8   -0.42   0.65   ▇▁▃▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscope-std()-Z {#frequencyBodyGyroscope_std___Z .tabset}



#### Distribution {#frequencyBodyGyroscope_std___Z_distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscope_std___Z_distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscope_std___Z_summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                             data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
-------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscope-std()-Z   numeric     0         180        180   -0.66   0.34   -0.99   -0.96   -0.82   -0.39   0.52   ▇▁▃▃▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerMagnitude-mean() {#frequencyBodyAccelerometerMagnitude_mean__ .tabset}



#### Distribution {#frequencyBodyAccelerometerMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                         data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
-------------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerMagnitude-mean()   numeric     0         180        180   -0.54   0.45   -0.99   -0.96   -0.67   -0.16   0.59   ▇▁▁▃▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerMagnitude-std() {#frequencyBodyAccelerometerMagnitude_std__ .tabset}



#### Distribution {#frequencyBodyAccelerometerMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                        data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
------------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerMagnitude-std()   numeric     0         180        180   -0.62   0.35   -0.99   -0.95   -0.65   -0.37   0.18   ▇▁▁▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerkMagnitude-mean() {#frequencyBodyAccelerometerJerkMagnitude_mean__ .tabset}



#### Distribution {#frequencyBodyAccelerometerJerkMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerkMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerkMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                             data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
-----------------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerJerkMagnitude-mean()   numeric     0         180        180   -0.58   0.43   -0.99   -0.98   -0.79   -0.19   0.54   ▇▁▁▂▂▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyAccelerometerJerkMagnitude-std() {#frequencyBodyAccelerometerJerkMagnitude_std__ .tabset}



#### Distribution {#frequencyBodyAccelerometerJerkMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyAccelerometerJerkMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyAccelerometerJerkMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                            data_type   missing   complete   n     mean   sd     p0      p25     p50     p75     p100   hist     
----------------------------------------------  ----------  --------  ---------  ----  -----  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyAccelerometerJerkMagnitude-std()   numeric     0         180        180   -0.6   0.41   -0.99   -0.98   -0.81   -0.27   0.32   ▇▁▁▂▁▂▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscopeMagnitude-mean() {#frequencyBodyGyroscopeMagnitude_mean__ .tabset}



#### Distribution {#frequencyBodyGyroscopeMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscopeMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscopeMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                     data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
---------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscopeMagnitude-mean()   numeric     0         180        180   -0.67   0.32   -0.99   -0.96   -0.77   -0.41   0.2    ▇▁▂▂▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscopeMagnitude-std() {#frequencyBodyGyroscopeMagnitude_std__ .tabset}



#### Distribution {#frequencyBodyGyroscopeMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscopeMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscopeMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                    data_type   missing   complete   n     mean    sd     p0      p25     p50     p75     p100   hist     
--------------------------------------  ----------  --------  ---------  ----  ------  -----  ------  ------  ------  ------  -----  ---------
frequencyBodyGyroscopeMagnitude-std()   numeric     0         180        180   -0.67   0.29   -0.98   -0.95   -0.77   -0.43   0.24   ▇▁▂▃▂▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscopeJerkMagnitude-mean() {#frequencyBodyGyroscopeJerkMagnitude_mean__ .tabset}



#### Distribution {#frequencyBodyGyroscopeJerkMagnitude_mean___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscopeJerkMagnitude_mean___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscopeJerkMagnitude_mean___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                         data_type   missing   complete   n     mean    sd     p0   p25     p50     p75     p100   hist     
-------------------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  ------  -----  ---------
frequencyBodyGyroscopeJerkMagnitude-mean()   numeric     0         180        180   -0.76   0.26   -1   -0.98   -0.88   -0.58   0.15   ▇▂▃▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```









### frequencyBodyGyroscopeJerkMagnitude-std() {#frequencyBodyGyroscopeJerkMagnitude_std__ .tabset}



#### Distribution {#frequencyBodyGyroscopeJerkMagnitude_std___distribution}

```r
show_missings <- FALSE
if (has_label(item)) {
  missings <- item[is.na(haven::zap_missing(item))]
  attributes(missings) <- attributes(item)
  if (!is.null(attributes(item)$labels)) {
    attributes(missings)$labels <- attributes(missings)$labels[is.na(attributes(missings)$labels)]
    attributes(item)$labels <- attributes(item)$labels[!is.na(attributes(item)$labels)]
  }
  if (is.numeric(item)) {
    show_missings <- length(unique(haven::na_tag(missings))) > 1
    item <- haven::zap_missing(item)
  }
  if (length(item_attributes$labels) == 0 && is.numeric(item)) {
    item <- haven::zap_labels(item)
  }
}
item_nomiss <- item[!is.na(item)]

# unnest mc_multiple and so on
if (
  is.character(item_nomiss) &&
  stringr::str_detect(item_nomiss, stringr::fixed(", ")) &&
  (exists("type", item_info) && 
    stringr::str_detect(item_info$type, pattern = stringr::fixed("multiple")))
  ) {
  item_nomiss <- unlist(stringr::str_split(item_nomiss, pattern = stringr::fixed(", ")))
}
attributes(item_nomiss) <- attributes(item)

old_height <- knitr::opts_chunk$get("fig.height")
non_missing_choices <- item_attributes[["labels"]]
many_labels <- length(non_missing_choices) > 7
go_vertical <- !is.numeric(item_nomiss) || many_labels
if ( go_vertical ) {
  # numeric items are plotted horizontally (because that's what usually expected)
  # categorical items are plotted vertically because we can use the screen real estate better this way

	if (is.null(choices) || 
	    dplyr::n_distinct(item_nomiss) > length(non_missing_choices)) {
		non_missing_choices <- unique(item_nomiss)
		names(non_missing_choices) <- non_missing_choices
	}
  choice_multiplier <- old_height/6.5
	new_height <- 2 + choice_multiplier * length(non_missing_choices)
	new_height <- ifelse(new_height > 20, 20, new_height)
	new_height <- ifelse(new_height < 1, 1, new_height)
	knitr::opts_chunk$set(fig.height = new_height)
}

wrap_at <- knitr::opts_chunk$get("fig.width") * 10
```

```r
# todo: if there are free-text choices mingled in with the pre-defined ones, don't show
# todo: show rare items if they are pre-defined
# todo: bin rare responses into "other category"
if (!length(item_nomiss)) {
  cat("No non-missing values to show.")
} else if (is.numeric(item_nomiss) || dplyr::n_distinct(item_nomiss) < 20) {
  plot_labelled(item_nomiss, item_name, wrap_at, go_vertical)
} else {
	cat(dplyr::n_distinct(item_nomiss), " unique, categorical values, so not shown.")
}
```

<img src="tidydata_files/figure-html/frequencyBodyGyroscopeJerkMagnitude_std___distribution-1.png" width="672" />

```r
knitr::opts_chunk$set(fig.height = old_height)
```

0 missings.

#### Summary statistics {#frequencyBodyGyroscopeJerkMagnitude_std___summary}

```r
attributes(item) <- item_attributes
df = data.frame(item, stringsAsFactors = FALSE)
names(df) = html_item_name
escaped_table(codebook_table(df))
```



name                                        data_type   missing   complete   n     mean    sd     p0   p25     p50     p75     p100   hist     
------------------------------------------  ----------  --------  ---------  ----  ------  -----  ---  ------  ------  ------  -----  ---------
frequencyBodyGyroscopeJerkMagnitude-std()   numeric     0         180        180   -0.77   0.25   -1   -0.98   -0.89   -0.61   0.29   ▇▂▃▂▁▁▁▁ 

```r
if (show_missings) {
  plot_labelled(missings, item_name, wrap_at)
}
```

```r
if (!is.null(item_info)) {
  # don't show choices again, if they're basically same thing as value labels
  if (!is.null(choices) && !is.null(item_info$choices) && 
    all(names(na.omit(choices)) == item_info$choices) &&
    all(na.omit(choices) == names(item_info$choices))) {
    item_info$choices <- NULL
  }
  item_info$label_parsed <- 
    item_info$choice_list <- item_info$study_id <- item_info$id <- NULL
  pander::pander(item_info)
}
```

```r
if (!is.null(choices) && length(choices) && length(choices) < 30) {
	pander::pander(as.list(choices))
}
```


```r
missingness_report
```





## Missingness report

Among those who finished the survey. Only variables that have missings are shown.

```r
if (  exists("ended", results) &&
  exists("expired", results)) {
  finisher_results <- dplyr::filter(results, !is.na(.data$ended))
} else {
  finisher_results <- results
  warning("Could not figure out who finished the surveys, because the ",
          "variables expired and ended were missing.")
}
```

```
## Warning: Could not figure out who finished the surveys, because the
## variables expired and ended were missing.
```

```r
if (length(md_pattern)) {
  pander::pander(md_pattern)
}
```



```r
items
```




## Codebook table

```r
export_table(metadata_table)
```

<!--html_preserve--><div id="htmlwidget-1beff4ccedd9e6aec6b2" style="width:100%;height:auto;" class="datatables html-widget"></div>
<script type="application/json" data-for="htmlwidget-1beff4ccedd9e6aec6b2">{"x":{"filter":"top","filterHTML":"<tr>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"disabled\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"disabled\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"disabled\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n  <td data-type=\"character\" style=\"vertical-align: top;\">\n    <div class=\"form-group has-feedback\" style=\"margin-bottom: auto;\">\n      <input type=\"search\" placeholder=\"All\" class=\"form-control\" style=\"width: 100%;\"/>\n      <span class=\"glyphicon glyphicon-remove-circle form-control-feedback\"><\/span>\n    <\/div>\n  <\/td>\n<\/tr>","extensions":["Buttons"],"data":[["<a href=\"#subject\">subject<\/a>","<a href=\"#activity\">activity<\/a>","<a href=\"#timeBodyAccelerometer_mean___X\">timeBodyAccelerometer-mean()-X<\/a>","<a href=\"#timeBodyAccelerometer_mean___Y\">timeBodyAccelerometer-mean()-Y<\/a>","<a href=\"#timeBodyAccelerometer_mean___Z\">timeBodyAccelerometer-mean()-Z<\/a>","<a href=\"#timeBodyAccelerometer_std___X\">timeBodyAccelerometer-std()-X<\/a>","<a href=\"#timeBodyAccelerometer_std___Y\">timeBodyAccelerometer-std()-Y<\/a>","<a href=\"#timeBodyAccelerometer_std___Z\">timeBodyAccelerometer-std()-Z<\/a>","<a href=\"#timeGravityAccelerometer_mean___X\">timeGravityAccelerometer-mean()-X<\/a>","<a href=\"#timeGravityAccelerometer_mean___Y\">timeGravityAccelerometer-mean()-Y<\/a>","<a href=\"#timeGravityAccelerometer_mean___Z\">timeGravityAccelerometer-mean()-Z<\/a>","<a href=\"#timeGravityAccelerometer_std___X\">timeGravityAccelerometer-std()-X<\/a>","<a href=\"#timeGravityAccelerometer_std___Y\">timeGravityAccelerometer-std()-Y<\/a>","<a href=\"#timeGravityAccelerometer_std___Z\">timeGravityAccelerometer-std()-Z<\/a>","<a href=\"#timeBodyAccelerometerJerk_mean___X\">timeBodyAccelerometerJerk-mean()-X<\/a>","<a href=\"#timeBodyAccelerometerJerk_mean___Y\">timeBodyAccelerometerJerk-mean()-Y<\/a>","<a href=\"#timeBodyAccelerometerJerk_mean___Z\">timeBodyAccelerometerJerk-mean()-Z<\/a>","<a href=\"#timeBodyAccelerometerJerk_std___X\">timeBodyAccelerometerJerk-std()-X<\/a>","<a href=\"#timeBodyAccelerometerJerk_std___Y\">timeBodyAccelerometerJerk-std()-Y<\/a>","<a href=\"#timeBodyAccelerometerJerk_std___Z\">timeBodyAccelerometerJerk-std()-Z<\/a>","<a href=\"#timeBodyGyroscope_mean___X\">timeBodyGyroscope-mean()-X<\/a>","<a href=\"#timeBodyGyroscope_mean___Y\">timeBodyGyroscope-mean()-Y<\/a>","<a href=\"#timeBodyGyroscope_mean___Z\">timeBodyGyroscope-mean()-Z<\/a>","<a href=\"#timeBodyGyroscope_std___X\">timeBodyGyroscope-std()-X<\/a>","<a href=\"#timeBodyGyroscope_std___Y\">timeBodyGyroscope-std()-Y<\/a>","<a href=\"#timeBodyGyroscope_std___Z\">timeBodyGyroscope-std()-Z<\/a>","<a href=\"#timeBodyGyroscopeJerk_mean___X\">timeBodyGyroscopeJerk-mean()-X<\/a>","<a href=\"#timeBodyGyroscopeJerk_mean___Y\">timeBodyGyroscopeJerk-mean()-Y<\/a>","<a href=\"#timeBodyGyroscopeJerk_mean___Z\">timeBodyGyroscopeJerk-mean()-Z<\/a>","<a href=\"#timeBodyGyroscopeJerk_std___X\">timeBodyGyroscopeJerk-std()-X<\/a>","<a href=\"#timeBodyGyroscopeJerk_std___Y\">timeBodyGyroscopeJerk-std()-Y<\/a>","<a href=\"#timeBodyGyroscopeJerk_std___Z\">timeBodyGyroscopeJerk-std()-Z<\/a>","<a href=\"#timeBodyAccelerometerMagnitude_mean__\">timeBodyAccelerometerMagnitude-mean()<\/a>","<a href=\"#timeBodyAccelerometerMagnitude_std__\">timeBodyAccelerometerMagnitude-std()<\/a>","<a href=\"#timeGravityAccelerometerMagnitude_mean__\">timeGravityAccelerometerMagnitude-mean()<\/a>","<a href=\"#timeGravityAccelerometerMagnitude_std__\">timeGravityAccelerometerMagnitude-std()<\/a>","<a href=\"#timeBodyAccelerometerJerkMagnitude_mean__\">timeBodyAccelerometerJerkMagnitude-mean()<\/a>","<a href=\"#timeBodyAccelerometerJerkMagnitude_std__\">timeBodyAccelerometerJerkMagnitude-std()<\/a>","<a href=\"#timeBodyGyroscopeMagnitude_mean__\">timeBodyGyroscopeMagnitude-mean()<\/a>","<a href=\"#timeBodyGyroscopeMagnitude_std__\">timeBodyGyroscopeMagnitude-std()<\/a>","<a href=\"#timeBodyGyroscopeJerkMagnitude_mean__\">timeBodyGyroscopeJerkMagnitude-mean()<\/a>","<a href=\"#timeBodyGyroscopeJerkMagnitude_std__\">timeBodyGyroscopeJerkMagnitude-std()<\/a>","<a href=\"#frequencyBodyAccelerometer_mean___X\">frequencyBodyAccelerometer-mean()-X<\/a>","<a href=\"#frequencyBodyAccelerometer_mean___Y\">frequencyBodyAccelerometer-mean()-Y<\/a>","<a href=\"#frequencyBodyAccelerometer_mean___Z\">frequencyBodyAccelerometer-mean()-Z<\/a>","<a href=\"#frequencyBodyAccelerometer_std___X\">frequencyBodyAccelerometer-std()-X<\/a>","<a href=\"#frequencyBodyAccelerometer_std___Y\">frequencyBodyAccelerometer-std()-Y<\/a>","<a href=\"#frequencyBodyAccelerometer_std___Z\">frequencyBodyAccelerometer-std()-Z<\/a>","<a href=\"#frequencyBodyAccelerometerJerk_mean___X\">frequencyBodyAccelerometerJerk-mean()-X<\/a>","<a href=\"#frequencyBodyAccelerometerJerk_mean___Y\">frequencyBodyAccelerometerJerk-mean()-Y<\/a>","<a href=\"#frequencyBodyAccelerometerJerk_mean___Z\">frequencyBodyAccelerometerJerk-mean()-Z<\/a>","<a href=\"#frequencyBodyAccelerometerJerk_std___X\">frequencyBodyAccelerometerJerk-std()-X<\/a>","<a href=\"#frequencyBodyAccelerometerJerk_std___Y\">frequencyBodyAccelerometerJerk-std()-Y<\/a>","<a href=\"#frequencyBodyAccelerometerJerk_std___Z\">frequencyBodyAccelerometerJerk-std()-Z<\/a>","<a href=\"#frequencyBodyGyroscope_mean___X\">frequencyBodyGyroscope-mean()-X<\/a>","<a href=\"#frequencyBodyGyroscope_mean___Y\">frequencyBodyGyroscope-mean()-Y<\/a>","<a href=\"#frequencyBodyGyroscope_mean___Z\">frequencyBodyGyroscope-mean()-Z<\/a>","<a href=\"#frequencyBodyGyroscope_std___X\">frequencyBodyGyroscope-std()-X<\/a>","<a href=\"#frequencyBodyGyroscope_std___Y\">frequencyBodyGyroscope-std()-Y<\/a>","<a href=\"#frequencyBodyGyroscope_std___Z\">frequencyBodyGyroscope-std()-Z<\/a>","<a href=\"#frequencyBodyAccelerometerMagnitude_mean__\">frequencyBodyAccelerometerMagnitude-mean()<\/a>","<a href=\"#frequencyBodyAccelerometerMagnitude_std__\">frequencyBodyAccelerometerMagnitude-std()<\/a>","<a href=\"#frequencyBodyAccelerometerJerkMagnitude_mean__\">frequencyBodyAccelerometerJerkMagnitude-mean()<\/a>","<a href=\"#frequencyBodyAccelerometerJerkMagnitude_std__\">frequencyBodyAccelerometerJerkMagnitude-std()<\/a>","<a href=\"#frequencyBodyGyroscopeMagnitude_mean__\">frequencyBodyGyroscopeMagnitude-mean()<\/a>","<a href=\"#frequencyBodyGyroscopeMagnitude_std__\">frequencyBodyGyroscopeMagnitude-std()<\/a>","<a href=\"#frequencyBodyGyroscopeJerkMagnitude_mean__\">frequencyBodyGyroscopeJerkMagnitude-mean()<\/a>","<a href=\"#frequencyBodyGyroscopeJerkMagnitude_std__\">frequencyBodyGyroscopeJerkMagnitude-std()<\/a>"],["integer","character","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numericnull,"0",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],[null,"6",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],[null,"6",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],[null,"18",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],["15.5",null," 0.27  ","-0.018 ","-0.11  ","-0.56  ","-0.46  ","-0.58  "," 0.7   ","-0.016 "," 0.074 ","-0.96  ","-0.95  ","-0.94  "," 0.079 "," 0.0076","-0.005 ","-0.59  ","-0.57  ","-0.74  ","-0.032 ","-0.074 "," 0.087 ","-0.69  ","-0.65  ","-0.62  ","-0.096 ","-0.043 ","-0.055 ","-0.7   ","-0.76  ","-0.71  ","-0.5   ","-0.54  ","-0.5   ","-0.54  ","-0.61  ","-0.58  ","-0.57  ","-0.63  ","-0.74  ","-0.76  ","-0.58  ","-0.49  ","-0.63  ","-0.55  ","-0.48  ","-0.58  ","-0.61  ","-0.59  ","-0.71  ","-0.61  ","-0.57  ","-0.76  ","-0.64  ","-0.68  ","-0.6   ","-0.71  ","-0.65  ","-0.66  ","-0.54  ","-0.62  ","-0.58  ","-0.6   ","-0.67  ","-0.67  ","-0.76  ","-0.77  "],["8.68",null,"0.012 ","0.0058","0.0096","0.45  ","0.5   ","0.4   ","0.49  ","0.35  ","0.29  ","0.025 ","0.033 ","0.04  ","0.013 ","0.014 ","0.013 ","0.42  ","0.43  ","0.28  ","0.054 ","0.036 ","0.036 ","0.29  ","0.35  ","0.37  ","0.023 ","0.0095","0.012 ","0.3   ","0.27  ","0.3   ","0.47  ","0.43  ","0.47  ","0.43  ","0.4   ","0.42  ","0.4   ","0.34  ","0.28  ","0.27  ","0.43  ","0.48  ","0.36  ","0.46  ","0.47  ","0.39  ","0.4   ","0.41  ","0.3   ","0.4   ","0.43  ","0.26  ","0.35  ","0.33  ","0.38  ","0.27  ","0.36  ","0.34  ","0.45  ","0.35  ","0.43  ","0.41  ","0.32  ","0.29  ","0.26  ","0.25  "],["1",null," 0.22 ","-0.041","-0.15 ","-1    ","-0.99 ","-0.99 ","-0.68 ","-0.48 ","-0.5  ","-1    ","-0.99 ","-0.99 "," 0.043","-0.039","-0.067","-0.99 ","-0.99 ","-0.99 ","-0.21 ","-0.2  ","-0.072","-0.99 ","-0.99 ","-0.99 ","-0.16 ","-0.077","-0.092","-1    ","-1    ","-1    ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.98 ","-0.98 ","-1    ","-1    ","-1    ","-0.99 ","-0.99 ","-1    ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-1    ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.99 ","-0.98 ","-1    ","-1    "],["8",null," 0.27   ","-0.02   ","-0.11   ","-0.98   ","-0.94   ","-0.95   "," 0.84   ","-0.23   ","-0.12   ","-0.98   ","-0.97   ","-0.96   "," 0.074  "," 0.00047","-0.011  ","-0.98   ","-0.97   ","-0.98   ","-0.047  ","-0.09   "," 0.075  ","-0.97   ","-0.96   ","-0.96   ","-0.1    ","-0.046  ","-0.062  ","-0.98   ","-0.98   ","-0.98   ","-0.96   ","-0.94   ","-0.96   ","-0.94   ","-0.98   ","-0.98   ","-0.95   ","-0.95   ","-0.99   ","-0.98   ","-0.98   ","-0.95   ","-0.96   ","-0.98   ","-0.94   ","-0.95   ","-0.98   ","-0.97   ","-0.98   ","-0.98   ","-0.97   ","-0.98   ","-0.97   ","-0.97   ","-0.96   ","-0.98   ","-0.96   ","-0.96   ","-0.96   ","-0.95   ","-0.98   ","-0.98   ","-0.96   ","-0.95   ","-0.98   ","-0.98   "],["15.5",null," 0.28  ","-0.017 ","-0.11  ","-0.75  ","-0.51  ","-0.65  "," 0.92  ","-0.13  "," 0.024 ","-0.97  ","-0.96  ","-0.95  "," 0.076 "," 0.0095","-0.0039","-0.81  ","-0.78  ","-0.88  ","-0.029 ","-0.073 "," 0.085 ","-0.79  ","-0.8   ","-0.8   ","-0.099 ","-0.041 ","-0.053 ","-0.84  ","-0.89  ","-0.86  ","-0.48  ","-0.61  ","-0.48  ","-0.61  ","-0.82  ","-0.8   ","-0.66  ","-0.74  ","-0.86  ","-0.88  ","-0.77  ","-0.59  ","-0.72  ","-0.75  ","-0.51  ","-0.64  ","-0.81  ","-0.78  ","-0.87  ","-0.83  ","-0.79  ","-0.9   ","-0.73  ","-0.81  ","-0.79  ","-0.81  ","-0.8   ","-0.82  ","-0.67  ","-0.65  ","-0.79  ","-0.81  ","-0.77  ","-0.77  ","-0.88  ","-0.89  "],["23",null," 0.28 ","-0.015","-0.1  ","-0.2  ","-0.031","-0.23 "," 0.94 "," 0.088"," 0.15 ","-0.95 ","-0.94 ","-0.92 "," 0.083"," 0.013"," 0.002","-0.22 ","-0.15 ","-0.51 ","-0.017","-0.061"," 0.1  ","-0.44 ","-0.42 ","-0.31 ","-0.091","-0.038","-0.049","-0.46 ","-0.59 ","-0.47 ","-0.092","-0.21 ","-0.092","-0.21 ","-0.25 ","-0.22 ","-0.22 ","-0.36 ","-0.51 ","-0.58 ","-0.22 ","-0.063","-0.32 ","-0.2  ","-0.079","-0.27 ","-0.28 ","-0.2  ","-0.47 ","-0.25 ","-0.17 ","-0.54 ","-0.34 ","-0.45 ","-0.26 ","-0.48 ","-0.42 ","-0.39 ","-0.16 ","-0.37 ","-0.19 ","-0.27 ","-0.41 ","-0.43 ","-0.58 ","-0.61 "],["30",null," 0.3   ","-0.0013","-0.075 "," 0.63  "," 0.62  "," 0.61  "," 0.97  "," 0.96  "," 0.96  ","-0.83  ","-0.64  ","-0.61  "," 0.13  "," 0.057 "," 0.038 "," 0.54  "," 0.36  "," 0.031 "," 0.19  "," 0.027 "," 0.18  "," 0.27  "," 0.48  "," 0.56  ","-0.022 ","-0.013 ","-0.0069"," 0.18  "," 0.3   "," 0.19  "," 0.64  "," 0.43  "," 0.64  "," 0.43  "," 0.43  "," 0.45  "," 0.42  "," 0.3   "," 0.088 "," 0.25  "," 0.54  "," 0.52  "," 0.28  "," 0.66  "," 0.56  "," 0.69  "," 0.47  "," 0.28  "," 0.16  "," 0.48  "," 0.35  ","-0.0062"," 0.47  "," 0.33  "," 0.49  "," 0.2   "," 0.65  "," 0.52  "," 0.59  "," 0.18  "," 0.54  "," 0.32  "," 0.2   "," 0.24  "," 0.15  "," 0.29  "],["▇▇▆▇▇▆▇▇",null,"▁▁▁▁▂▇▂▁","▁▁▂▂▇▃▁▁","▁▁▁▂▇▃▁▁","▇▁▁▃▂▂▁▁","▇▁▁▁▃▂▁▁","▇▁▂▃▂▁▁▁","▁▁▁▁▁▁▁▇","▂▇▅▂▁▁▁▁","▁▅▇▆▁▁▁▁","▇▆▅▂▁▁▁▁","▇▅▁▁▁▁▁▁","▇▆▂▁▁▁▁▁","▁▁▇▇▂▁▁▁","▁▁▂▆▇▂▁▁","▁▁▁▁▇▆▁▁","▇▁▁▂▂▂▁▁","▇▁▁▂▂▂▁▁","▇▁▂▂▂▁▁▁","▁▁▂▇▁▁▁▁","▁▁▁▃▇▂▁▁","▁▁▁▁▇▇▂▁","▇▁▂▃▂▁▁▁","▇▁▃▂▁▁▁▁","▇▁▂▃▂▁▁▁","▁▁▁▇▁▁▁▁","▁▁▁▂▇▂▁▁","▁▁▃▇▃▁▁▁","▇▁▂▃▂▁▁▁","▇▂▂▂▁▁▁▁","▇▁▂▂▂▁▁▁","▇▁▁▂▃▂▁▁","▇▁▁▂▂▁▂▁","▇▁▁▂▃▂▁▁","▇▁▁▂▂▁▂▁","▇▁▁▂▂▁▁▁","▇▁▁▂▂▂▁▁","▇▁▁▂▃▁▁▁","▇▁▂▃▂▁▁▁","▇▁▂▂▂▁▁▁","▇▂▃▂▁▁▁▁","▇▁▁▃▂▂▁▁","▇▁▁▁▃▂▁▁","▇▁▁▂▃▁▁▁","▇▁▁▃▂▁▁▁","▇▁▁▁▃▂▁▁","▇▁▂▃▁▁▁▁","▇▁▁▂▂▁▁▁","▇▁▁▂▂▂▁▁","▇▁▂▂▂▁▁▁","▇▁▁▂▂▂▁▁","▇▁▁▂▂▂▁▁","▇▁▂▂▂▁▁▁","▇▁▂▃▂▁▁▁","▇▁▃▂▁▁▁▁","▇▁▁▃▂▁▁▁","▇▁▂▃▂▁▁▁","▇▁▃▂▁▁▁▁","▇▁▃▃▁▁▁▁","▇▁▁▃▂▂▁▁","▇▁▁▂▂▁▁▁","▇▁▁▂▂▂▁▁","▇▁▁▂▁▂▁▁","▇▁▂▂▂▁▁▁","▇▁▂▃▂▁▁▁","▇▂▃▂▁▁▁▁","▇▂▃▂▁▁▁▁"]],"container":"<table class=\"display\">\n  <thead>\n    <tr>\n      <th>name<\/th>\n      <th>data_type<\/th>\n      <th>missing<\/th>\n      <th>complete<\/th>\n      <th>n<\/th>\n      <th>empty<\/th>\n      <th>n_unique<\/th>\n      <th>min<\/th>\n      <th>max<\/th>\n      <th>mean<\/th>\n      <th>sd<\/th>\n      <th>p0<\/th>\n      <th>p25<\/th>\n      <th>p50<\/th>\n      <th>p75<\/th>\n      <th>p100<\/th>\n      <th>hist<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>","options":{"dom":"Bfrtip","buttons":["copy","csv","excel","pdf","print"],"pageLength":200,"order":[],"autoWidth":false,"orderClasses":false,"orderCellsTop":true,"lengthMenu":[10,25,50,100,200]}},"evals":[],"jsHooks":[]}</script><!--/html_preserve-->


```r
jsonld
```




<script type="application/ld+json">
{
  "name": "results",
  "keywords": ["subject", "activity", "timeBodyAccelerometer-mean()-X", "timeBodyAccelerometer-mean()-Y", "timeBodyAccelerometer-mean()-Z", "timeBodyAccelerometer-std()-X", "timeBodyAccelerometer-std()-Y", "timeBodyAccelerometer-std()-Z", "timeGravityAccelerometer-mean()-X", "timeGravityAccelerometer-mean()-Y", "timeGravityAccelerometer-mean()-Z", "timeGravityAccelerometer-std()-X", "timeGravityAccelerometer-std()-Y", "timeGravityAccelerometer-std()-Z", "timeBodyAccelerometerJerk-mean()-X", "timeBodyAccelerometerJerk-mean()-Y", "timeBodyAccelerometerJerk-mean()-Z", "timeBodyAccelerometerJerk-std()-X", "timeBodyAccelerometerJerk-std()-Y", "timeBodyAccelerometerJerk-std()-Z", "timeBodyGyroscope-mean()-X", "timeBodyGyroscope-mean()-Y", "timeBodyGyroscope-mean()-Z", "timeBodyGyroscope-std()-X", "timeBodyGyroscope-std()-Y", "timeBodyGyroscope-std()-Z", "timeBodyGyroscopeJerk-mean()-X", "timeBodyGyroscopeJerk-mean()-Y", "timeBodyGyroscopeJerk-mean()-Z", "timeBodyGyroscopeJerk-std()-X", "timeBodyGyroscopeJerk-std()-Y", "timeBodyGyroscopeJerk-std()-Z", "timeBodyAccelerometerMagnitude-mean()", "timeBodyAccelerometerMagnitude-std()", "timeGravityAccelerometerMagnitude-mean()", "timeGravityAccelerometerMagnitude-std()", "timeBodyAccelerometerJerkMagnitude-mean()", "timeBodyAccelerometerJerkMagnitude-std()", "timeBodyGyroscopeMagnitude-mean()", "timeBodyGyroscopeMagnitude-std()", "timeBodyGyroscopeJerkMagnitude-mean()", "timeBodyGyroscopeJerkMagnitude-std()", "frequencyBodyAccelerometer-mean()-X", "frequencyBodyAccelerometer-mean()-Y", "frequencyBodyAccelerometer-mean()-Z", "frequencyBodyAccelerometer-std()-X", "frequencyBodyAccelerometer-std()-Y", "frequencyBodyAccelerometer-std()-Z", "frequencyBodyAccelerometerJerk-mean()-X", "frequencyBodyAccelerometerJerk-mean()-Y", "frequencyBodyAccelerometerJerk-mean()-Z", "frequencyBodyAccelerometerJerk-std()-X", "frequencyBodyAccelerometerJerk-std()-Y", "frequencyBodyAccelerometerJerk-std()-Z", "frequencyBodyGyroscope-mean()-X", "frequencyBodyGyroscope-mean()-Y", "frequencyBodyGyroscope-mean()-Z", "frequencyBodyGyroscope-std()-X", "frequencyBodyGyroscope-std()-Y", "frequencyBodyGyroscope-std()-Z", "frequencyBodyAccelerometerMagnitude-mean()", "frequencyBodyAccelerometerMagnitude-std()", "frequencyBodyAccelerometerJerkMagnitude-mean()", "frequencyBodyAccelerometerJerkMagnitude-std()", "frequencyBodyGyroscopeMagnitude-mean()", "frequencyBodyGyroscopeMagnitude-std()", "frequencyBodyGyroscopeJerkMagnitude-mean()", "frequencyBodyGyroscopeJerkMagnitude-std()"],
  "variableMeasured": [
    {
      "name": "subject",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "15.5",
          "sd": "8.68",
          "p0": "1",
          "p25": "8",
          "p50": "15.5",
          "p75": "23",
          "p100": "30",
          "hist": "▇▇▆▇▇▆▇▇",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "activity",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "min": "6",
          "max": "18",
          "empty": "0",
          "n_unique": "6",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "text",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometer-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "0.27",
          "sd": "0.012",
          "p0": "0.22",
          "p25": "0.27",
          "p50": "0.28",
          "p75": "0.28",
          "p100": "0.3",
          "hist": "▁▁▁▁▂▇▂▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometer-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.018",
          "sd": "0.0058",
          "p0": "-0.041",
          "p25": "-0.02",
          "p50": "-0.017",
          "p75": "-0.015",
          "p100": "-0.0013",
          "hist": "▁▁▂▂▇▃▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometer-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.11",
          "sd": "0.0096",
          "p0": "-0.15",
          "p25": "-0.11",
          "p50": "-0.11",
          "p75": "-0.1",
          "p100": "-0.075",
          "hist": "▁▁▁▂▇▃▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometer-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.56",
          "sd": "0.45",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.75",
          "p75": "-0.2",
          "p100": "0.63",
          "hist": "▇▁▁▃▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometer-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.46",
          "sd": "0.5",
          "p0": "-0.99",
          "p25": "-0.94",
          "p50": "-0.51",
          "p75": "-0.031",
          "p100": "0.62",
          "hist": "▇▁▁▁▃▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometer-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.58",
          "sd": "0.4",
          "p0": "-0.99",
          "p25": "-0.95",
          "p50": "-0.65",
          "p75": "-0.23",
          "p100": "0.61",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometer-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "0.7",
          "sd": "0.49",
          "p0": "-0.68",
          "p25": "0.84",
          "p50": "0.92",
          "p75": "0.94",
          "p100": "0.97",
          "hist": "▁▁▁▁▁▁▁▇",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometer-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.016",
          "sd": "0.35",
          "p0": "-0.48",
          "p25": "-0.23",
          "p50": "-0.13",
          "p75": "0.088",
          "p100": "0.96",
          "hist": "▂▇▅▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometer-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "0.074",
          "sd": "0.29",
          "p0": "-0.5",
          "p25": "-0.12",
          "p50": "0.024",
          "p75": "0.15",
          "p100": "0.96",
          "hist": "▁▅▇▆▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometer-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.96",
          "sd": "0.025",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.97",
          "p75": "-0.95",
          "p100": "-0.83",
          "hist": "▇▆▅▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometer-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.95",
          "sd": "0.033",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.96",
          "p75": "-0.94",
          "p100": "-0.64",
          "hist": "▇▅▁▁▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometer-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.94",
          "sd": "0.04",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.95",
          "p75": "-0.92",
          "p100": "-0.61",
          "hist": "▇▆▂▁▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerk-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "0.079",
          "sd": "0.013",
          "p0": "0.043",
          "p25": "0.074",
          "p50": "0.076",
          "p75": "0.083",
          "p100": "0.13",
          "hist": "▁▁▇▇▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerk-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "0.0076",
          "sd": "0.014",
          "p0": "-0.039",
          "p25": "0.00047",
          "p50": "0.0095",
          "p75": "0.013",
          "p100": "0.057",
          "hist": "▁▁▂▆▇▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerk-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.005",
          "sd": "0.013",
          "p0": "-0.067",
          "p25": "-0.011",
          "p50": "-0.0039",
          "p75": "0.002",
          "p100": "0.038",
          "hist": "▁▁▁▁▇▆▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerk-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.59",
          "sd": "0.42",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.81",
          "p75": "-0.22",
          "p100": "0.54",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerk-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.57",
          "sd": "0.43",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.78",
          "p75": "-0.15",
          "p100": "0.36",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerk-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.74",
          "sd": "0.28",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.88",
          "p75": "-0.51",
          "p100": "0.031",
          "hist": "▇▁▂▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscope-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.032",
          "sd": "0.054",
          "p0": "-0.21",
          "p25": "-0.047",
          "p50": "-0.029",
          "p75": "-0.017",
          "p100": "0.19",
          "hist": "▁▁▂▇▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscope-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.074",
          "sd": "0.036",
          "p0": "-0.2",
          "p25": "-0.09",
          "p50": "-0.073",
          "p75": "-0.061",
          "p100": "0.027",
          "hist": "▁▁▁▃▇▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscope-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "0.087",
          "sd": "0.036",
          "p0": "-0.072",
          "p25": "0.075",
          "p50": "0.085",
          "p75": "0.1",
          "p100": "0.18",
          "hist": "▁▁▁▁▇▇▂▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscope-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.69",
          "sd": "0.29",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.79",
          "p75": "-0.44",
          "p100": "0.27",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscope-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.65",
          "sd": "0.35",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.8",
          "p75": "-0.42",
          "p100": "0.48",
          "hist": "▇▁▃▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscope-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.62",
          "sd": "0.37",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.8",
          "p75": "-0.31",
          "p100": "0.56",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerk-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.096",
          "sd": "0.023",
          "p0": "-0.16",
          "p25": "-0.1",
          "p50": "-0.099",
          "p75": "-0.091",
          "p100": "-0.022",
          "hist": "▁▁▁▇▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerk-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.043",
          "sd": "0.0095",
          "p0": "-0.077",
          "p25": "-0.046",
          "p50": "-0.041",
          "p75": "-0.038",
          "p100": "-0.013",
          "hist": "▁▁▁▂▇▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerk-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.055",
          "sd": "0.012",
          "p0": "-0.092",
          "p25": "-0.062",
          "p50": "-0.053",
          "p75": "-0.049",
          "p100": "-0.0069",
          "hist": "▁▁▃▇▃▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerk-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.7",
          "sd": "0.3",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.84",
          "p75": "-0.46",
          "p100": "0.18",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerk-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.76",
          "sd": "0.27",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.89",
          "p75": "-0.59",
          "p100": "0.3",
          "hist": "▇▂▂▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerk-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.71",
          "sd": "0.3",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.86",
          "p75": "-0.47",
          "p100": "0.19",
          "hist": "▇▁▂▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.5",
          "sd": "0.47",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.48",
          "p75": "-0.092",
          "p100": "0.64",
          "hist": "▇▁▁▂▃▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.54",
          "sd": "0.43",
          "p0": "-0.99",
          "p25": "-0.94",
          "p50": "-0.61",
          "p75": "-0.21",
          "p100": "0.43",
          "hist": "▇▁▁▂▂▁▂▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometerMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.5",
          "sd": "0.47",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.48",
          "p75": "-0.092",
          "p100": "0.64",
          "hist": "▇▁▁▂▃▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeGravityAccelerometerMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.54",
          "sd": "0.43",
          "p0": "-0.99",
          "p25": "-0.94",
          "p50": "-0.61",
          "p75": "-0.21",
          "p100": "0.43",
          "hist": "▇▁▁▂▂▁▂▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerkMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.61",
          "sd": "0.4",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.82",
          "p75": "-0.25",
          "p100": "0.43",
          "hist": "▇▁▁▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyAccelerometerJerkMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.58",
          "sd": "0.42",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.8",
          "p75": "-0.22",
          "p100": "0.45",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.57",
          "sd": "0.4",
          "p0": "-0.98",
          "p25": "-0.95",
          "p50": "-0.66",
          "p75": "-0.22",
          "p100": "0.42",
          "hist": "▇▁▁▂▃▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.63",
          "sd": "0.34",
          "p0": "-0.98",
          "p25": "-0.95",
          "p50": "-0.74",
          "p75": "-0.36",
          "p100": "0.3",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerkMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.74",
          "sd": "0.28",
          "p0": "-1",
          "p25": "-0.99",
          "p50": "-0.86",
          "p75": "-0.51",
          "p100": "0.088",
          "hist": "▇▁▂▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "timeBodyGyroscopeJerkMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.76",
          "sd": "0.27",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.88",
          "p75": "-0.58",
          "p100": "0.25",
          "hist": "▇▂▃▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometer-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.58",
          "sd": "0.43",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.77",
          "p75": "-0.22",
          "p100": "0.54",
          "hist": "▇▁▁▃▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometer-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.49",
          "sd": "0.48",
          "p0": "-0.99",
          "p25": "-0.95",
          "p50": "-0.59",
          "p75": "-0.063",
          "p100": "0.52",
          "hist": "▇▁▁▁▃▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometer-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.63",
          "sd": "0.36",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.72",
          "p75": "-0.32",
          "p100": "0.28",
          "hist": "▇▁▁▂▃▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometer-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.55",
          "sd": "0.46",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.75",
          "p75": "-0.2",
          "p100": "0.66",
          "hist": "▇▁▁▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometer-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.48",
          "sd": "0.47",
          "p0": "-0.99",
          "p25": "-0.94",
          "p50": "-0.51",
          "p75": "-0.079",
          "p100": "0.56",
          "hist": "▇▁▁▁▃▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometer-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.58",
          "sd": "0.39",
          "p0": "-0.99",
          "p25": "-0.95",
          "p50": "-0.64",
          "p75": "-0.27",
          "p100": "0.69",
          "hist": "▇▁▂▃▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerk-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.61",
          "sd": "0.4",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.81",
          "p75": "-0.28",
          "p100": "0.47",
          "hist": "▇▁▁▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerk-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.59",
          "sd": "0.41",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.78",
          "p75": "-0.2",
          "p100": "0.28",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerk-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.71",
          "sd": "0.3",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.87",
          "p75": "-0.47",
          "p100": "0.16",
          "hist": "▇▁▂▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerk-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.61",
          "sd": "0.4",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.83",
          "p75": "-0.25",
          "p100": "0.48",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerk-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.57",
          "sd": "0.43",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.79",
          "p75": "-0.17",
          "p100": "0.35",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerk-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.76",
          "sd": "0.26",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.9",
          "p75": "-0.54",
          "p100": "-0.0062",
          "hist": "▇▁▂▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscope-mean()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.64",
          "sd": "0.35",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.73",
          "p75": "-0.34",
          "p100": "0.47",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscope-mean()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.68",
          "sd": "0.33",
          "p0": "-0.99",
          "p25": "-0.97",
          "p50": "-0.81",
          "p75": "-0.45",
          "p100": "0.33",
          "hist": "▇▁▃▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscope-mean()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.6",
          "sd": "0.38",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.79",
          "p75": "-0.26",
          "p100": "0.49",
          "hist": "▇▁▁▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscope-std()-X",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.71",
          "sd": "0.27",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.81",
          "p75": "-0.48",
          "p100": "0.2",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscope-std()-Y",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.65",
          "sd": "0.36",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.8",
          "p75": "-0.42",
          "p100": "0.65",
          "hist": "▇▁▃▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscope-std()-Z",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.66",
          "sd": "0.34",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.82",
          "p75": "-0.39",
          "p100": "0.52",
          "hist": "▇▁▃▃▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.54",
          "sd": "0.45",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.67",
          "p75": "-0.16",
          "p100": "0.59",
          "hist": "▇▁▁▃▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.62",
          "sd": "0.35",
          "p0": "-0.99",
          "p25": "-0.95",
          "p50": "-0.65",
          "p75": "-0.37",
          "p100": "0.18",
          "hist": "▇▁▁▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerkMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.58",
          "sd": "0.43",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.79",
          "p75": "-0.19",
          "p100": "0.54",
          "hist": "▇▁▁▂▂▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyAccelerometerJerkMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.6",
          "sd": "0.41",
          "p0": "-0.99",
          "p25": "-0.98",
          "p50": "-0.81",
          "p75": "-0.27",
          "p100": "0.32",
          "hist": "▇▁▁▂▁▂▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscopeMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.67",
          "sd": "0.32",
          "p0": "-0.99",
          "p25": "-0.96",
          "p50": "-0.77",
          "p75": "-0.41",
          "p100": "0.2",
          "hist": "▇▁▂▂▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscopeMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.67",
          "sd": "0.29",
          "p0": "-0.98",
          "p25": "-0.95",
          "p50": "-0.77",
          "p75": "-0.43",
          "p100": "0.24",
          "hist": "▇▁▂▃▂▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscopeJerkMagnitude-mean()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.76",
          "sd": "0.26",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.88",
          "p75": "-0.58",
          "p100": "0.15",
          "hist": "▇▂▃▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    },
    {
      "name": "frequencyBodyGyroscopeJerkMagnitude-std()",
      "data_summary": [
        {
          "missing": "0",
          "complete": "180",
          "n": "180",
          "mean": "-0.77",
          "sd": "0.25",
          "p0": "-1",
          "p25": "-0.98",
          "p50": "-0.89",
          "p75": "-0.61",
          "p100": "0.29",
          "hist": "▇▂▃▂▁▁▁▁",
          "@type": "http://formr.org/codebook/SummaryStatistics"
        }
      ],
      "value": "Number",
      "@context": {
        "@vocab": "http://pending.schema.org/"
      },
      "@type": "propertyValue"
    }
  ],
  "@context": "http://schema.org/",
  "@type": "Dataset"
}
</script>
